plugins {
    id 'java'
    id 'nu.studer.jooq' version '7.1.1'
}

ext {
    jooq_version = '3.13.4'
    postgres_version = '42.3.2'
}

dependencies {
    implementation "org.jooq:jooq-meta:${project.ext.jooq_version}"
    implementation "org.jooq:jooq:${project.ext.jooq_version}"
    implementation "org.postgresql:postgresql:${project.ext.postgres_version}"
    implementation "org.flywaydb:flyway-core:7.14.0"

    implementation project(':airbyte-db:lib')

    // jOOQ code generation
    implementation "org.jooq:jooq-codegen:${project.ext.jooq_version}"
    implementation "org.testcontainers:postgresql:1.15.3"
    // These are required because gradle might be using lower version of Jna from other
    // library transitive dependency. Can be removed if we can figure out which library is the cause.
    // Refer: https://github.com/testcontainers/testcontainers-java/issues/3834#issuecomment-825409079
    implementation 'net.java.dev.jna:jna:5.8.0'
    implementation 'net.java.dev.jna:jna-platform:5.8.0'

    // The jOOQ code generator only has access to classes added to the jooqGenerator configuration
    jooqGenerator "org.postgresql:postgresql:${project.ext.postgres_version}"
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

jooq {
    version = project.ext.jooq_version
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        configsDatabase {
            generateSchemaSourceOnCompilation = true
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = env.DATABASE_URL
                    user = env.DATABASE_USER
                    password = env.DATABASE_PASSWORD
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        excludes = 'airbyte_.*_migrations|attempt.*|.*job.*|airbyte_metadata'
                    }
                    target {
                        packageName = 'io.airbyte.db.instance.configs.jooq'
                        directory = 'build/generated/configsDatabase/src/main/java'
                    }
                }
            }
        }

        jobsDatabase {
            generateSchemaSourceOnCompilation = true
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = env.DATABASE_URL
                    user = env.DATABASE_USER
                    password = env.DATABASE_PASSWORD
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        excludes = 'airbyte_.*_migrations|.*actor.*|connection.*|namespace.*|operat.*|release.*|source.*|status_type|state|workspace'
                    }
                    target {
                        packageName = 'io.airbyte.db.instance.jobs.jooq'
                        directory = 'build/generated/jobsDatabase/src/main/java'
                    }
                }
            }
        }
    }
}

sourceSets.main.java.srcDirs (
        tasks.named('generateConfigsDatabaseJooq').flatMap { it.outputDir },
        tasks.named('generateJobsDatabaseJooq').flatMap { it.outputDir }
)

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/configsDatabase/src/main/java", "$buildDir/generated/jobsDatabase/src/main/java"
        }
    }
}

tasks.named('generateConfigsDatabaseJooq').configure {
    allInputsDeclared = true
    outputs.cacheIf { true }
}

tasks.named('generateJobsDatabaseJooq').configure {
    allInputsDeclared = true
    outputs.cacheIf { true }
}
